import csv

# --- Global Constants (Pre-calculated from the entire dataset for Z-score) ---
# Global Mean (μ) and Standard Deviation (σ) for 'flipper_length_mm'
MU_FLIPPER = 200.91520467836258
SIGMA_FLIPPER = 14.061713679356886

# --- Level 0: Main Control Function ---

def calculate_penguin_metrics(data_list_of_dicts):
    """
    Main function to orchestrate the calculation of all penguin metrics.
    
    Args:
        data_list_of_dicts (list): A list of dictionaries where each dict 
                                   is a penguin record.
    Returns:
        list: The original list of dictionaries with three new metric keys added 
              to each dictionary.
    """
    processed_data = []
    
    for record in data_list_of_dicts:
        # Attempt to convert relevant fields to float, skipping records with missing data (NA)
        try:
            bill_l = float(record['bill_length_mm'])
            bill_d = float(record['bill_depth_mm'])
            flipper_l = float(record['flipper_length_mm'])
            
            # --- Level 1 Function Calls ---
            record['Bill Index'] = calculate_bill_index(bill_l, bill_d)
            record['Flipper Z-score'] = calculate_flipper_zscore(flipper_l, MU_FLIPPER, SIGMA_FLIPPER)
            record['Penguin Volumetric Proxy'] = calculate_volumetric_proxy(bill_l, bill_d, flipper_l)
            
            processed_data.append(record)
            
        except ValueError:
            # Skip records where bill_length_mm, bill_depth_mm, or flipper_length_mm is 'NA'
            # Note: For production code, better NA handling (e.g., imputation) would be used.
            continue 
            
    return processed_data

# --- Level 1: Core Calculation Functions ---

def calculate_bill_index(bill_length, bill_depth):
    """Calculates the Bill Index (Ratio): bill_length / bill_depth."""
    return bill_length / bill_depth

def calculate_flipper_zscore(flipper_length, mu, sigma):
    """
    Calculates the Flipper Z-score: (value - mean) / std_dev.
    It calls the conceptual Level 2 functions implicitly via the constants.
    """
    
def calculate_volumetric_proxy(bill_length, bill_depth, flipper_length):
    """Calculates the Penguin Volumetric Proxy: L * D * Flipper L."""
    return bill_length * bill_depth * flipper_length

# --- Helper Functions (Conceptual Level 2) for Z-Score ---

def get_mean(data_series):
    """Conceptual function to calculate the mean of a data series."""

def get_std_dev(data_series, mu):
    """Conceptual function to calculate the standard deviation of a data series."""

# --- File I/O Functions (For Project Requirements) ---

def read_csv_to_list_of_dicts(filename):
    """Imports a CSV file and returns the data as a list of dictionaries."""
    data = []
    with open(filename, mode='r', newline='', encoding='utf-8') as file:
        reader = csv.DictReader(file)
        for row in reader:
            data.append(row)
    return data

def write_results_to_file(filename, data):
    """Writes the processed list of dictionaries to a new CSV file."""
    if not data:
        print("No data to write.")
        return

    fieldnames = data[0].keys()
    
    with open(filename, mode='w', newline='', encoding='utf-8') as file:
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        
        writer.writeheader()
        
        writer.writerows(data)
    
    print(f"Successfully wrote {len(data)} processed records to {filename}")


# --- Execution Block ---

if __name__ == '__main__':
    # 1. Read data (Implementation of the 'Import' step)
    penguins_data = read_csv_to_list_of_dicts("penguins.csv")
    
    # 2. Perform calculations (Implementation of the Main Module)
    calculated_results = calculate_penguin_metrics(penguins_data)
    
    # 3. Write results to file (Implementation of 'File Output Function')
    write_results_to_file("penguin_metrics_results.csv", calculated_results)
